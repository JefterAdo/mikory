generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model blog_post_tags {
  post_id    Int
  tag_id     Int
  blog_posts blog_posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "blog_post_tags_ibfk_1")
  blog_tags  blog_tags  @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "blog_post_tags_ibfk_2")

  @@id([post_id, tag_id])
  @@index([tag_id], map: "tag_id")
}

model blog_posts {
  id              Int                @id @default(autoincrement())
  title           String             @db.VarChar(255)
  slug            String             @unique @db.VarChar(255)
  content         String             @db.Text
  excerpt         String?            @db.Text
  category        String?            @db.VarChar(100)
  status          blog_posts_status? @default(draft)
  featured_image  String?            @db.VarChar(255)
  meta_title      String?            @db.VarChar(255)
  meta_description String?            @db.Text
  keywords        String?            @db.VarChar(255)
  created_at      DateTime?          @default(now()) @db.Timestamp(0)
  updated_at      DateTime?          @default(now()) @db.Timestamp(0)
  blog_post_tags  blog_post_tags[]
}

model blog_tags {
  id             Int              @id @default(autoincrement())
  name           String           @unique(map: "unique_tag_name") @db.VarChar(100)
  blog_post_tags blog_post_tags[]
}

model categories {
  id              String            @id @db.Char(36)
  name            String            @db.VarChar(100)
  slug            String            @unique(map: "slug") @db.VarChar(100)
  description     String?           @db.Text
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @db.Timestamp(0)
  post_categories post_categories[]
}

model comments {
  id             String     @id @db.Char(36)
  author_name    String     @db.VarChar(100)
  author_email   String     @db.VarChar(255)
  content        String     @db.Text
  approved       Boolean?   @default(false)
  post_id        String     @db.Char(36)
  parent_id      String?    @db.Char(36)
  created_at     DateTime?  @default(now()) @db.Timestamp(0)
  updated_at     DateTime?  @default(now()) @db.Timestamp(0)
  comments       comments?  @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comments_parent")
  other_comments comments[] @relation("commentsTocomments")
  posts          posts      @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comments_post")

  @@index([parent_id], map: "parent_id")
  @@index([post_id], map: "post_id")
}

model media {
  id                            String    @id @db.Char(36)
  title                         String?   @db.VarChar(255) // Titre Ã©ditable par l'utilisateur
  filename                      String    @db.VarChar(255)
  mime_type                     String    @db.VarChar(100)
  filesize                      Int
  width                         Int?
  height                        Int?
  url                           String    @db.VarChar(255)
  alt                           String?   @default("") @db.VarChar(255)
  created_by                    String?   @db.Char(36)
  updated_by                    String?   @db.Char(36)
  created_at                    DateTime? @default(now()) @db.Timestamp(0)
  updated_at                    DateTime? @default(now()) @db.Timestamp(0)
  users_media_created_byTousers users?    @relation("media_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_media_created_by")
  users_media_updated_byTousers users?    @relation("media_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_media_updated_by")

  @@index([created_by], map: "created_by")
  @@index([updated_by], map: "updated_by")
}

model pages {
  id                            String    @id @db.Char(36)
  title                         String    @db.VarChar(255)
  slug                          String    @unique(map: "slug") @db.VarChar(255)
  content                       String?   @db.LongText
  meta_title                    String?   @db.VarChar(255)
  meta_description              String?   @db.Text
  published                     Boolean?  @default(false)
  created_by                    String?   @db.Char(36)
  updated_by                    String?   @db.Char(36)
  created_at                    DateTime? @default(now()) @db.Timestamp(0)
  updated_at                    DateTime? @default(now()) @db.Timestamp(0)
  users_pages_created_byTousers users?    @relation("pages_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_pages_created_by")
  users_pages_updated_byTousers users?    @relation("pages_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_pages_updated_by")

  @@index([created_by], map: "created_by")
  @@index([updated_by], map: "updated_by")
}

model post_categories {
  post_id     String     @db.Char(36)
  category_id String     @db.Char(36)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post_categories_category")
  posts       posts      @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post_categories_post")

  @@id([post_id, category_id])
  @@index([category_id], map: "category_id")
}

model posts {
  id              String            @id @db.Char(36)
  title           String            @db.VarChar(255)
  slug            String            @unique(map: "slug") @db.VarChar(255)
  excerpt         String?           @db.Text
  content         String?           @db.LongText
  cover_image     String?           @db.VarChar(255)
  published       Boolean?          @default(false)
  published_at    DateTime?         @db.DateTime(0)
  author_id       String            @db.Char(36)
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  updated_at      DateTime?         @default(now()) @db.Timestamp(0)
  comments        comments[]
  post_categories post_categories[]
  users           users             @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_posts_author")

  @@index([author_id], map: "author_id")
}

model settings {
  id         String        @id @db.Char(36)
  key        String        @unique(map: "key") @db.VarChar(100)
  value      String?       @db.Text
  type       settings_type @default(string)
  created_at DateTime?     @default(now()) @db.Timestamp(0)
  updated_at DateTime?     @default(now()) @db.Timestamp(0)
}

model users {
  id                            String     @id @db.Char(36)
  name                          String?    @db.VarChar(255)
  email                         String     @unique(map: "email") @db.VarChar(255)
  password                      String     @db.VarChar(255)
  role                          users_role @default(user)
  reset_password_token          String?    @db.VarChar(255)
  reset_password_expires        DateTime?  @db.DateTime(0)
  created_at                    DateTime?  @default(now()) @db.Timestamp(0)
  updated_at                    DateTime?  @default(now()) @db.Timestamp(0)
  media_media_created_byTousers media[]    @relation("media_created_byTousers")
  media_media_updated_byTousers media[]    @relation("media_updated_byTousers")
  pages_pages_created_byTousers pages[]    @relation("pages_created_byTousers")
  pages_pages_updated_byTousers pages[]    @relation("pages_updated_byTousers")
  posts                         posts[]
}

enum settings_type {
  string
  number
  boolean
  json
}

enum users_role {
  admin
  editor
  user
}

enum blog_posts_status {
  draft
  published
  review
}
